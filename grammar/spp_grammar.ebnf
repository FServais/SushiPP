(*---------------------------------------------------------------*)
(*-                      Terminal symbols                       -*)
(*-  Set of symbols for construction of basic chain like words  -*)
(*---------------------------------------------------------------*)

(* Tokens *)
(* Keywords *) 
T_KEYWORD_MAKI  = "maki";
T_KEYWORD_NORI  = "nori";
T_KEYWORD_FOR   = "for";
T_KEYWORD_ROLL  = "roll";
T_KEYWORD_MAT   = "mat"; 
T_KEYWORD_IF    = "if";
T_KEYWORD_ELIF  = "elseif";
T_KEYWORD_ELSE  = "else";
T_KEYWORD_TO    = "to";
T_KEYWORD_SOY   = "soy";
T_KEYWORD_MENU  = "menu";
T_KEYWORD_INT   = "int";
T_KEYWORD_FLOAT = "float";
T_KEYWORD_TUPLE = "tuple";
T_KEYWORD_ARRAY = "array";
T_KEYWORD_LIST  = "list";
T_KEYWORD_STR   = "string";
T_KEYWORD_CONT  = "continue";
T_KEYWORD_BREAK = "break";
T_KEYWORD_DEFAU = "_";

type = T_KEYWORD_STR | T_KEYWORD_TUPLE | T_KEYWORD_ARRAY 
		| T_KEYWORD_INT | T_KEYWORD_FLOAT | T_KEYWORD_LIST;

(* Constant expression : integers, float,.. *)
T_CONST_INT    = "int_val"; 
T_CONST_FLOAT  = "float_val";
T_CONST_STRING = "string_val";

constant = T_CONST_STRING | T_CONST_FLOAT | T_CONST_INT;

(* Identifier *)
T_IDENTIFIER = "id";

(* Operators *)
T_OPERATOR_ARITH       = "op_arith";
T_OPERATOR_LOGICAL     = "op_logic";
T_OPERATOR_COMP        = "op_comp";
T_OPERATOR_INCR 	   = "++";
T_OPERATOR_DECR		   = "--";
T_OPERATOR_NEG 		   = "!";
T_OPERATOR_CONCAT      = ".";

T_OPERATOR_ASSIGN_VAR  = "=";
T_OPERATOR_ASSIGN_FUNC = ":";

(* Delimiters *)
T_DELIM_COMMA     = ",";
T_DELIM_EOL       = "\n";
T_DELIM_EOS       = ";;";
T_DELIM_PAREN_BEG = "(";
T_DELIM_PAREN_END = ")";
T_DELIM_BRACE_BEG = "{";
T_DELIM_BRACE_END = "}";
T_DELIM_BRACK_BEG = "[";
T_DELIM_BRACK_END = "]";
T_DELIM_CHEVR_BEG = "<";
T_DELIM_CHEVR_END = ">";
T_DELIM_ARROW     = "->";

(*---------------------------------------------------------------*)
(*-                       Sushi++ syntax                        -*)
(*-                      Syntactic rules                        -*)
(*---------------------------------------------------------------*)

(* General structure *)
program = { program_item };
program_item = declaration | expression_eol | statement;

(* Declaration *)
declaration = T_KEYWORD_MAKI, ( decl-func | decl-vars ), T_DELIM_EOL;

(* Named functions *)
decl-func = T_IDENTIFIER, param-list, T_OPERATOR_ASSIGN_FUNC, [T_DELIM_EOL], func-body, T_DELIM_EOS;
param-list = { T_IDENTIFIER, [ T_DELIM_CHEVR_BEG, type, T_DELIM_CHEVR_END ] };

func-body = program_item+;

(* Variables *)
decl-vars = assign-var, { T_DELIM_COMMA, [T_DELIM_EOL], assign-var };
assign-var  = variable, T_OPERATOR_ASSIGN_VAR, ( expression | datastructure );
variable  = T_IDENTIFIER;

(* Expressions *)
expression_eol = expression, T_DELIM_EOL;

(* General expressions *)
expression = braced-expression; 
expression = soy-expression; 
expression = constant;
expression = func-call;
expression = variable;
expression = datastructure-access;

(* Arithmetic, boolean, comparison and concatenation operations *)
expression = expression, T_OPERATOR_ARITH, expression;
expression = expression, T_OPERATOR_COMP, expression;
expression = expression, T_OPERATOR_LOGICAL, expression;
expression = expression, T_OPERATOR_CONCAT, expression;
expression = T_OPERATOR_NEG, expression;
expression = T_OPERATOR_INCR, expression;
expression = T_OPERATOR_DECR, expression;
expression = expression, T_OPERATOR_INCR;
expression = expression, T_OPERATOR_DECR;
expression = assignable-expression, T_OPERATOR_ASSIGN_VAR, expression;

(* Expression that can be assigned a value *)
assignable-expression = variable | datastructure-access;

(* Braced expression : expression sourrounded with parenthesis *)
braced-expression = T_DELIM_PAREN_BEG, expression, T_DELIM_PAREN_END;

(* Function call *)
func-call = ( T_IDENTIFIER | soy-expression ), { argument };
argument = variable | constant | datastructure | braced-expression | soy-expression;

(* Anonymous function *)
soy-expression = T_DELIM_PAREN_BEG, soy-func, T_DELIM_PAREN_END;
soy-func = T_KEYWORD_SOY, param-list, T_OPERATOR_ASSIGN_FUNC, func-body; 

(* Datastructure *)
datastructure = array | list | tuple | make-sequence;

array = T_DELIM_BRACK_BEG, *{ expression }, T_DELIM_BRACK_END;
list  = T_DELIM_BRACE_BEG, *{ expression }, T_DELIM_BRACK_END;
tuple = T_DELIM_CHEVR_BEG, *{ expression }, T_DELIM_CHEVR_END;

datastructure-access = variable, T_DELIM_BRACK_BEG, expression, T_DELIM_BRACK_END;

make-sequence = make-sequence-list | make-sequence-array;
make-sequence-list  = T_DELIM_BRACE_BEG, seq-expression, T_DELIM_BRACK_END;
make-sequence-array = T_DELIM_BRACK_BEG, seq-expression, T_DELIM_BRACK_END;

seq-expression = T_CONST_INT, T_KEYWORD_TO, T_CONST_INT;

(* Statement *)
statement = condition | loop | switch | return | T_CONTINUE;

(* Condition *)
condition = T_KEYWORD_IF, expression_eol, program_item+, 
			{ T_KEYWORD_ELIF, expression_eol, program_item+ }, 
			[ T_KEYWORD_ELSE, [ T_DELIM_EOL ], program_item+ ], T_DELIM_EOS;

(* Loops *)
loop = for_list | for_cond | roll;
for_list = T_KEYWORD_FOR, variable, T_OPERATOR_ASSIGN_VAR, expression_eol, { program_item }, T_DELIM_EOS;
for_cond = T_KEYWORD_FOR, variable, T_OPERATOR_ASSIGN_VAR, expression, 
					T_DELIM_COMMA, expression, 
					T_DELIM_COMMA, expression_eol,
					{ program_item },
					T_DELIM_EOS;

roll = T_KEYWORD_ROLL, expression_eol, { program_item }, T_DELIM_EOS;

(* Switch *)
switch = T_KEYWORD_MENU, expression_eol, switch-body+, [ switch-default ], T_DELIM_EOS;
switch-body = expression, T_DELIM_ARROW, { program_item }, T_DELIM_EOS;
switch-default = T_KEYWORD_DEFAU, T_DELIM_ARROW, { program_item }, T_DELIM_EOS;

return = T_KEYWORD_NORI, expression_eol;


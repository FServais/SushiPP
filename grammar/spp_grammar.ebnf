(* Main rules *)
program = scope+ ;
scope = ( program_element, [ EOL ] )+;
scope = EOL, scope ;

program-element = statement | modifying-expr | declaration ;

(* Declarations *)
declaration = KEYWORD_MAKI ( decl-func | decl-vars );

decl-vars = ( decl-var, [ ',', [ EOL ] ] )+ ;
decl-var = IDENTIFIER, [ '=',  expr ] ;

decl-func = IDENTIFIER, param-list, ':', scope, ";;" ;
param-list = { param } ;
param = IDENTIFIER, [ '<', type, '>' ] ;

(* Function call *)
func-call = IDENTIFIER, arg-list ;
arg-list = { argument } ;

argument =
  IDENTIFIER
| constant
| datastructure
| '(', expr, ')'
| soy-expr
| datastructure-access
| braced-func-call
;

braced-func-call = '(', func-call-eol, ')' ;
func-call-eol = ( IDENTIFIER | soy-expr), arg-list-eol ;
arg-list-eol = ( argument, [ EOL ] )+;

soy-expr = '(', soy-func, ')' ;
soy-func = KEYWORD_SOY, param-list, ':', scope ;

(* Expressions *)
expr =
  constant
| '(', expr, ')'
| IDENTIFIER
| datastructure
| soy-expr
| datastructure-access
| incr-expr
| assign
| braced-func-call
| expr, '+', expr
| expr, '-', expr
| expr, '*', expr
| expr, '/', expr
| expr, '%', expr
| expr, "**", expr
| '-', expr 
| expr, '|', expr
| expr, '&', expr
| expr, '^', expr
| '~', expr
| expr, "||", expr
| expr, "&&", expr
| '!', expr
| expr, '<', expr
| expr, '>', expr
| expr, "<=", expr
| expr, ">=", expr
| expr, "==",  expr
| expr, "!=", expr
| expr, "<<", expr
| expr, ">>", expr
| expr, '.', expr
;

incr-expr =
  "++", assign-expr 
| "--", assign-expr
| assign-expr, "++"
| assign-expr, "--"
;

assign =
  assign-expr, '=', expr
| assign-expr, "+=", expr
| assign-expr, "-=", expr
| assign-expr, "*=", expr
| assign-expr, "/=", expr
| assign-expr, "**=", expr
| assign-expr, "%=", expr
| assign-expr, "&=", expr
| assign-expr, "|=", expr
| assign-expr, "^=", expr
| assign-expr, ".=", expr
;

modifying-expr =
  assign
| incr-expr
| braced-func-call
| func-call
;

assign-expr = IDENTIFIER | datastructure-access ;

datastructure-access = IDENTIFIER '[', expr, ']' ;

expr-list =  expr, [ ',', expr-list ];

(* Constant *)
constant =
  CONST_INT
| CONST_FLOAT
| CONST_STRING
| CONST_BOOL
| CONST_CHAR
;

(* Datastructures *)
datastructure =
  array
| list
| tuple
| make-sequence 
;

array = "#[", "]#" | "#[", expr-list, "]#"  ;
list = '{' '}'  | '{', expr-list, '}' ;
tuple = "#{", "}#" | "#{", expr-list, "}#" ;

(* Sequence expression *)
make-sequence = make-sequence-list | make-sequence-array ;
make-sequence-list = '{', seq-expr, '}';
make-sequence-array = "#[", seq-expr, "]#" ;
seq-expr = expr, "to", expr;

(* Statement *)
statement =
  return
| menu
| loop
| "continue"
| "break"
| conditional
;

return = "nori", [ expr ];

menu = "menu", expr EOL menu-body ";;";
menu-body = menu-def EOL | menu-case EOL [ menu-body ] ;
menu-case = expr, "->", scope, ";;" ;
menu-def = '_', "->", scope, ";;" ;

loop = foreach | for | roll ;
roll = "roll", expr, EOL, scope, ";;";
foreach = "foreach", expr, "as", IDENTIFIER, EOL, scope, ";;" ;

for = "for", for-initializer, ',', expr, ',', for-update, EOL, scope, ";;";
for-initializer = assign+ ;
for-update = modifying-expr+ ;

conditional = "if", expr, EOL, scope, [ elseif ], [ KEYWORD_ELSE, scope ] ";;" ;
elseif = "elseif", expr, EOL, scope, [ elseif ] ;
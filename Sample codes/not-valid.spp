
$ maki -> mak
mak a = 2

$ comma missing
maki a = 3 b = 5, c = 18

$ parenthesis missing
maki func a b : nori (a + b ;;

$ typo
maki func a b<hint> : nori (a + 2) ;;

$ ';' missing
maki func a b : nori (a = b - 2) ;

$ parenthesis missing between function call
a soy a b : nori 18 + a + b

$ strings 
a = 'aaa'
b = "bbb"
c = a+b $ . -> +


$ datastructures
maki a = { 2, b, 1 }
maki b = #{ a, b, 3, 18, "aaa" }#
maki c = #[ a, b, 3, 18, "aaa" ]#
maki ba_c = #[ 18 to 21 ]#
maki a = 2


$ return
nori "fck"

$ inline nori
maki func a b<int>: nori (a + b);;
maki func a : 
	nori (a + b);;
maki func a :
	nori (a + b)
;;

$ multiline
maki func a b :
	a += b
	b += 2
	a *= b
	nori (a + b)
;;

$ character 
maki a = 'a'

$switch case inline one line
menu (func a b)
	a -> a = b + 2 ;;
	b -> c = b + 2 ;; 
	_ -> a = d + 2 ;;
;;

$ switch

$ switch multiline
menu a
	'a' -> a = 18;;
	'b' ->
		func do stuff
	;;
	'c' -> c = 19;;
;;

for i = 2, i < 10, ++i
	do something
;;

foreach { 1, 2, 3 } as list-item
	do something
;;

foreach items as item
	do something
;;

for i = 2, i < 10, ++i
	do something
;;

for , i < 10, 
	do somthing else-4
	++i
;;

roll a == 2
	break
	continue
	nori (18 + 25)
;;

for i = 2, i < 10, ++i
	do something
;;

foreach { 1, 2, 3 } as list-item
	do something
;;

foreach items as item
	do something
;;

for i = 2, i < 10, ++i
	do something
;;

for , i < 10, 
	do somthing else-4
	++i
;;

roll a == 2
	break
	continue
	nori (18 + 25)
;;

$ simple if
if a 
	nori 25
;;

$ more elaborate if
if a < 2 || c + 3 
	do something
	a = a + 2
;;

$ if else
if a < 2 || c + 3 
	do something
	a = a + 2
else 
	something else_
;;

$ if elseif else
if a < 2 || c + 3 
	do something
	a = a + 2
elseif a < 145
	escape da thing
	nori (expre ss ss)
else 
	something else_
;;

$ not beautiful but should work
if a < 2 || c + 3 
	do something
	a = a + 2 elseif a < 145 
    escape da thing
	nori (expre ss ss) 
	func a b else 
	something else_
;;
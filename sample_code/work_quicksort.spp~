$ Swap values of the array
$ array Array of which items must be swapped
$ item1 index of the first element to swap
$ item2 index of the second element to swap
maki array-swap array item1 item2 :
	maki tmp = array[item1]
	array[item1] = array[item2]
	array[item2] = tmp
;;

$ Partition a partially partitionned range of an array
$ array 		 Array
$ pivot 		 Index of the pivot (pivot >= item_index) pivot must be the last item of the range to partition
$ boundary_index Index of the element following the last element smaller than the pivot (item_index >= boundary_index)
$ item_index     Index of the current item to partition
maki partition array pivot boundary_index item_index :
	if item_index == pivot
		array-swap array boundary_index pivot
		nori boundary_index
	;;

	$ compare item index to the pivot
	if array[item_index] < array[end] 
		array-swap array boundary_index item_index
		partition array pivot (++boundary_index) (++item_index)
	else
		partition array pivot boundary_index (++item_index)
	;;
;;

$ Sort the array range with the quicksort algorithm
$ array   The array to sort
$ start   Index of the first element of the range to sort
$ end     Index of the element one past the last one of the range
maki quicksort_aux array start end :
	if (end - start) <= 1
		nori
	;;

	maki pivot_index = (end - start) / 2 + start,
		 last_index = end - 1

	$partition the array around the given pivot
	swap array pivot_index last_index
	pivot = (partition array last_index start start)

	quicksort_aux array start pivot
	quicksort_aux array (++pivot) end 
;;

$ Array sorting with quicksort algorithm
maki quicksort array :
	if (array_len array) <= 1
		nori
	;;

	quicksort_aux array 0 (array_len array)
;;

array = #[ an, brand, new, array ]#
quicksort array

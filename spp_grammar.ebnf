(*---------------------------------------------------------------*)
(*-                      Basic components                       -*)
(*-  Set of symbols for construction of basic chain like words  -*)
(*---------------------------------------------------------------*)

(* Digit and letters *)
lc-letter = 
	"a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" |
	"k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" |
	"v" | "w" | "x" | "y" | "z";

uc-letter =
	"A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" |
	"K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" |
	"V" | "W" | "X" | "Y" | "Z";

non-zero-digit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9";

zero   = "0";
digit  = zero | non-zero-digit;
letter = lc_letter | uc_letter;

hexa-digit = 
    digit | "A" | "B" | "C" | "D" | "E" | "F" | "a" | "b" | "c" |
    "d" | "e" | "f";

bin-digit  = "0" | "1";

(* Symbols *)
(* how to represent double quote " ??? *)
symbol = symbol_no_quote | quote;
quote  = "";

symbol_no_quote = 
    "," | ";" | ":" | "=" | "$" | "&" | "|" | "(" | "!" | ")" | 
    "-" | "<" | ">" | "," | "?" | "." | "/" | "+" | "%" | "*" |
    "{" | "}" | "_" | "\" | "[" | "]" | "~" | "'";

(* Symbol that might appear in words *)
underscore = "_";
hyphen     = "-";
opening-parenthesis = "(";
closing-parenthesis = ")";

(* Whitespace characters *)
space        = " ";
newline      = "\n" | "\r\n" | "\r";
vertical-tab = "\x0B";
tabulation   = "\t";
form-feed    = "\f";

whitespace = space | newline | tabulation | vertical-tab | form_feed;

(* Combinations *)
char-no-digit = letter | underscore;
char-no-symb  = letter | digit;
char          = char-no-digit | digit;
char-hyphen   = char | "-";

(* Words *)
word              = char, *{ char };
word-hyphen       = char-hyphen, *{ char-hyphen };
word-letter-first = letter, *{ char };

word-no-digit-first 	   = char-no-digit, *{ char };
word-hyphen-letter-first   = letter, *{ char-hyphen };
word-hyphen-no-digit-first = char-no-digit, *{ char-hyphen};

(*---------------------------------------------------------------*)
(*-                      Sushi++ language                       -*)
(*-       Rules directly related to the language structure      -*)
(*---------------------------------------------------------------*)

(* General structure *)
program = *{ declaration | definition };

(* Keywords *)
keyword-maki   = "maki";
keyword-soy    = "soy"; 

(* Flow control *)
keyword-if     = "if";
keyword-elseif = "else if";
keyword-else   = "else";
keyword-roll   = "roll";

(* Symbols *)
symb-func-def = ":";
symb-case-def = "->";
symb-assign   = "=";
symb-comma    = ",";
symb-quote    = quote;

symb-end-of-scope     = ";;";
symb-op-parenthesis   = "(";
symb-cl-parenthesis   = ")";

symb-hexa-pref = "0x";
symb-bin-pref = "0b";

(* Delimiters *)
delim-arr-op = "[";
delim-arr-cl = "]";
delim-lst-op = "{";
delim-lst-cl = "}";
delim-tup-op = "<";
delim-tup-cl = ">";

(* Constant *)
constant = number | string | datastructure;

number  = integer | float | bin | hexa;

integer = digit, { *digit };
hexa    = symb-hexa-pref, hexa-digit, *{ hexa-digit };
bin     = symb-bin-pref, bin-digit, *{ bin-digit };
float   = ( zero | non-zero-digit, *{ digit } ), symb-comma, *{ digit };

string  = quote, word , quote;

(* Datastructure *)
array = delim-arr-op, *{ expression }, delim-arr-cl;
list  = delim-lst-op, *{ expression }, delim-lst-cl;
tuple = delim-tup-op, *{ expression }, delim-tup-cl;

(* Identifiers name *)
var-name   = word-no-digit-first;
param-name = word-no-digit-first;
func-name  = word-hyphen-no-digit-first;

(* Definitions *)
definition = keyword-maki, def-item;
def-item   = def-func | def-var;

(* Function definition *)
def-func   = function-name, *{ param-name }, symb-func-def, declaration, symb-end-of-scope;
def-lambda = keyword-soy, *{ param-name }, symb-func-def, declaration, symb-end-of-scope;

(* Variable *)
def-var = var-name, symb-assign, [ symb-op-parenthesis ], ( expression | def-lambda ), [ symb-cl-parenthesis ];

(* Declaration *)


(* Expression *)
expression = constant | func-call;
func-call  = ;


